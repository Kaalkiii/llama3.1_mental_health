# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ql31zsiZT3svgyEmxn-8x9cSwO7AgP0P
"""

!pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"

!pip install -u "xformers<0.0.26" --index-erl https://download.pytorch.org/whl/cu121

from unsloth import FastLanguageModel
import torch


max_seq_length = 2048
dtype = None
load_in_4bit = True

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/Llama-3.2-11B-Vision-Instruct",
    max_seq_length=max_seq_length,
    dtype=dtype,
    load_in_4bit=load_in_4bit,
)

model = FastLanguageModel.get_peft_model(model,
    r=16,
    target_modules = ["q_proj", "k_proj", "v_proj" "o_proj", "gate_proj","up_proj","down_proj"],
    lora_alpha = 16,
    lora_dropout = 0,
    bias = "none",
    use_gradient_checkpointing = "unsloth",
    random_state = 3407,
    use_rslora = False,
    loftq_config = None,
    )

alpaca_prompt = """Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
{instruction}

### Input:
{input}

### Response:
{response}"""

EOS_TOKEN = tokenizer.eos_token  # Make sure you have the EOS token correctly set

def formatting_prompts_func(examples):
    # Access the columns using their actual names from the dataset
    inputs = examples["Context"]   # Changed from "input" to "context"
    outputs = examples["Response"]  # Changed from "output" to "answer"

    texts = []
    for context, response in zip(inputs, outputs):
        # You can customize the instruction as needed. For now, I'm assuming it's static
        instruction = "Please respond appropriately."
        text = alpaca_prompt.format(instruction=instruction, input=context, response=response) + EOS_TOKEN
        texts.append(text)

    return {"text": texts}

from datasets import load_dataset
dataset = load_dataset("Amod/mental_health_counseling_conversations", split="train")

# Apply the function to format the dataset
dataset = dataset.map(formatting_prompts_func, batched=True)

dataset['text']

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        # num_train_epochs = 1, # Set this for 1 full training run.
        max_steps = 60,
        learning_rate = 2e-4,
        fp16 = not is_bfloat16_supported(),
        bf16 = is_bfloat16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
        report_to = "none", # Use this for WandB etc
    ),
)

trainer_stats = trainer.train()

model.save_pretrained("model_directory")
tokenizer.save_pretrained("model_directory")